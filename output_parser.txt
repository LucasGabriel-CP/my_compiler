<func> $ 
[def, def, 0, 3]

def id ( <arg> ) { <bloco> } <func> $ 
[def, def, 0, 3]

id ( <arg> ) { <bloco> } <func> $ 
[id, fib, 0, 7]

( <arg> ) { <bloco> } <func> $ 
[(, (, 0, 8]

<arg> ) { <bloco> } <func> $ 
[int, int, 0, 11]

int id ) { <bloco> } <func> $ 
[int, int, 0, 11]

id ) { <bloco> } <func> $ 
[id, n, 0, 13]

) { <bloco> } <func> $ 
[), ), 0, 14]

{ <bloco> } <func> $ 
[{, {, 0, 16]

<bloco> } <func> $ 
[if, if, 1, 3]

<comando> <bloco> } <func> $ 
[if, if, 1, 3]

<if> <bloco> } <func> $ 
[if, if, 1, 3]

if ( <exp> ) { <bloco> } <else> <bloco> } <func> $ 
[if, if, 1, 3]

( <exp> ) { <bloco> } <else> <bloco> } <func> $ 
[(, (, 1, 5]

<exp> ) { <bloco> } <else> <bloco> } <func> $ 
[id, n, 1, 6]

<termo> <exp'> ) { <bloco> } <else> <bloco> } <func> $ 
[id, n, 1, 6]

id <exp'> ) { <bloco> } <else> <bloco> } <func> $ 
[id, n, 1, 6]

<exp'> ) { <bloco> } <else> <bloco> } <func> $ 
[opL, less, 1, 8]

opL <termo> ) { <bloco> } <else> <bloco> } <func> $ 
[opL, less, 1, 8]

<termo> ) { <bloco> } <else> <bloco> } <func> $ 
[INumber, 2, 1, 10]

constante ) { <bloco> } <else> <bloco> } <func> $ 
[INumber, 2, 1, 10]

) { <bloco> } <else> <bloco> } <func> $ 
[), ), 1, 11]

{ <bloco> } <else> <bloco> } <func> $ 
[{, {, 1, 12]

<bloco> } <else> <bloco> } <func> $ 
[return, return, 2, 8]

<comando> <bloco> } <else> <bloco> } <func> $ 
[return, return, 2, 8]

<return_exp> <bloco> } <else> <bloco> } <func> $ 
[return, return, 2, 8]

return <termo> ; <bloco> } <else> <bloco> } <func> $ 
[return, return, 2, 8]

<termo> ; <bloco> } <else> <bloco> } <func> $ 
[id, n, 2, 10]

id ; <bloco> } <else> <bloco> } <func> $ 
[id, n, 2, 10]

; <bloco> } <else> <bloco> } <func> $ 
[;, ;, 2, 11]

<bloco> } <else> <bloco> } <func> $ 
[}, }, 3, 2]

empty } <else> <bloco> } <func> $ 
[}, }, 3, 2]

} <else> <bloco> } <func> $ 
[}, }, 3, 2]

<else> <bloco> } <func> $ 
[return, return, 4, 7]

empty <bloco> } <func> $ 
[return, return, 4, 7]

<bloco> } <func> $ 
[return, return, 4, 7]

<comando> <bloco> } <func> $ 
[return, return, 4, 7]

<return_exp> <bloco> } <func> $ 
[return, return, 4, 7]

return <termo> ; <bloco> } <func> $ 
[return, return, 4, 7]

<termo> ; <bloco> } <func> $ 
[INumber, 32, 4, 10]

constante ; <bloco> } <func> $ 
[INumber, 32, 4, 10]

; <bloco> } <func> $ 
[;, ;, 4, 11]

<bloco> } <func> $ 
[}, }, 5, 1]

empty } <func> $ 
[}, }, 5, 1]

} <func> $ 
[}, }, 5, 1]

<func> $ 
[def, def, 6, 3]

def id ( <arg> ) { <bloco> } <func> $ 
[def, def, 6, 3]

id ( <arg> ) { <bloco> } <func> $ 
[id, main, 6, 8]

( <arg> ) { <bloco> } <func> $ 
[(, (, 6, 10]

<arg> ) { <bloco> } <func> $ 
[), ), 6, 12]

empty ) { <bloco> } <func> $ 
[), ), 6, 12]

) { <bloco> } <func> $ 
[), ), 6, 12]

{ <bloco> } <func> $ 
[{, {, 6, 13]

<bloco> } <func> $ 
[int, int, 7, 4]

<comando> <bloco> } <func> $ 
[int, int, 7, 4]

<decl> <bloco> } <func> $ 
[int, int, 7, 4]

int id <decl'> ; <bloco> } <func> $ 
[int, int, 7, 4]

id <decl'> ; <bloco> } <func> $ 
[id, a, 7, 6]

<decl'> ; <bloco> } <func> $ 
[;, ;, 7, 7]

empty ; <bloco> } <func> $ 
[;, ;, 7, 7]

; <bloco> } <func> $ 
[;, ;, 7, 7]

<bloco> } <func> $ 
[id, b, 8, 2]

<comando> <bloco> } <func> $ 
[id, b, 8, 2]

<exp_atrib> <bloco> } <func> $ 
[id, b, 8, 2]

id = <exp> ; <bloco> } <func> $ 
[id, b, 8, 2]

= <exp> ; <bloco> } <func> $ 
[=, =, 8, 4]

<exp> ; <bloco> } <func> $ 
[INumber, 1, 8, 6]

<termo> <exp'> ; <bloco> } <func> $ 
[INumber, 1, 8, 6]

constante <exp'> ; <bloco> } <func> $ 
[INumber, 1, 8, 6]

<exp'> ; <bloco> } <func> $ 
[opM, add, 8, 8]

opM <termo> <exp'> ; <bloco> } <func> $ 
[opM, add, 8, 8]

<termo> <exp'> ; <bloco> } <func> $ 
[INumber, 2, 8, 10]

constante <exp'> ; <bloco> } <func> $ 
[INumber, 2, 8, 10]

<exp'> ; <bloco> } <func> $ 
[;, ;, 8, 11]

empty ; <bloco> } <func> $ 
[;, ;, 8, 11]

; <bloco> } <func> $ 
[;, ;, 8, 11]

<bloco> } <func> $ 
[id, a, 9, 2]

<comando> <bloco> } <func> $ 
[id, a, 9, 2]

<exp_atrib> <bloco> } <func> $ 
[id, a, 9, 2]

id = <exp> ; <bloco> } <func> $ 
[id, a, 9, 2]

= <exp> ; <bloco> } <func> $ 
[=, =, 9, 4]

<exp> ; <bloco> } <func> $ 
[#, #, 9, 6]

<termo> <exp'> ; <bloco> } <func> $ 
[#, #, 9, 6]

<func_cal> <exp'> ; <bloco> } <func> $ 
[#, #, 9, 6]

# id ( <call_args> ) <exp'> ; <bloco> } <func> $ 
[#, #, 9, 6]

id ( <call_args> ) <exp'> ; <bloco> } <func> $ 
[id, fib, 9, 9]

( <call_args> ) <exp'> ; <bloco> } <func> $ 
[(, (, 9, 10]

<call_args> ) <exp'> ; <bloco> } <func> $ 
[INumber, 3, 9, 11]

<termo> <call_args'> ) <exp'> ; <bloco> } <func> $ 
[INumber, 3, 9, 11]

constante <call_args'> ) <exp'> ; <bloco> } <func> $ 
[INumber, 3, 9, 11]

<call_args'> ) <exp'> ; <bloco> } <func> $ 
[), ), 9, 12]

empty ) <exp'> ; <bloco> } <func> $ 
[), ), 9, 12]

) <exp'> ; <bloco> } <func> $ 
[), ), 9, 12]

<exp'> ; <bloco> } <func> $ 
[;, ;, 9, 13]

empty ; <bloco> } <func> $ 
[;, ;, 9, 13]

; <bloco> } <func> $ 
[;, ;, 9, 13]

<bloco> } <func> $ 
[return, return, 10, 7]

<comando> <bloco> } <func> $ 
[return, return, 10, 7]

<return_exp> <bloco> } <func> $ 
[return, return, 10, 7]

return <termo> ; <bloco> } <func> $ 
[return, return, 10, 7]

<termo> ; <bloco> } <func> $ 
[INumber, 0, 10, 9]

constante ; <bloco> } <func> $ 
[INumber, 0, 10, 9]

; <bloco> } <func> $ 
[;, ;, 10, 10]

<bloco> } <func> $ 
[}, }, 11, 1]

empty } <func> $ 
[}, }, 11, 1]

} <func> $ 
[}, }, 11, 1]

<func> $ 
[$, $, -1, -1]

empty $ 
[$, $, -1, -1]

$ 
[$, $, -1, -1]

Lexical Errors/Warnings:
Linha: 8    Coluna: 2.....: Variavel nao declarada!!
